---
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";
import SingleShopItem from "../../components/SingleShopItem";
import ViewBox from "../../components/ViewBox";
import type { CatalogItem, CatalogObject, ApiResponse } from "square";
// @ts-ignore
import { Client, Environment, RetrieveCatalogObjectResponse } from "square";

const date = new Date();

if (import.meta.env.SQUARE_ACCESS_TOKEN === undefined) {
  console.log("No Square Access Token");
  return new Response("No Square Access Token", { status: 500 });
}
const client = await new Client({
  accessToken: import.meta.env.SQUARE_ACCESS_TOKEN,
  environment: Environment.Production,
});
const getItem = async (): Promise<
  Response | ApiResponse<RetrieveCatalogObjectResponse>
> => {
  try {
    if (Astro.params.item?.includes("svg"))
      return new Response("No Item", { status: 404 });
    if (Astro.params.item === undefined)
      return new Response("No Item", { status: 404 });
    const response = await client.catalogApi.retrieveCatalogObject(
      Astro.params.item
    );
    return response;
  } catch (error: any) {
    console.error(error);
    return new Response(error, { status: 500 });
  }
};
const getImageUrl = async (imageId: string) => {
  try {
    const fetchImage = await client.catalogApi.retrieveCatalogObject(imageId);
    return fetchImage.result.object?.imageData?.url;
  } catch (err: any) {
    console.log(err);
    return new Response(err, { status: 500 });
  }
};
const getInventoryCount = async (variationId: string) => {
  try {
    const inventoryCount = await client.inventoryApi.retrieveInventoryCount(
      variationId,
      "LT6VCG48B673C"
    );

    if (!inventoryCount.result.counts) return "0";
    return inventoryCount.result.counts[0].quantity;
  } catch (err: any) {
    console.log(err);
    return new Response(err, { status: 500 });
  }
};
const getCategory = async (categoryId: string) => {
  try {
    const category = await client.catalogApi.retrieveCatalogObject(categoryId);
    return category.result.object?.categoryData?.name;
  } catch (err: any) {
    console.log(err);
    return new Response(err, { status: 500 });
  }
};

if (Astro.params.item?.includes("svg")) return Astro.redirect("/shop");
if (Astro.params.item === undefined) return Astro.redirect("/shop");
const item: any = await getItem();
if (!item.result) return Astro.redirect("/shop");
const imageUrl = await getImageUrl(item.result.object.itemData.imageIds[0]);
const inventoryCount = await getInventoryCount(
  item.result.object.itemData.variations[0].id
);
const category = await getCategory(item.result.object.itemData.categoryId);
if (item.result.object.customAttributeValues === undefined)
  return new Response("No Custom Attributes Found", { status: 500 });
const customAttributes: { name: string; stringValue: string }[] = Object.values(
  item.result.object.customAttributeValues
);
if (!item.result.object.itemData.variations)
  return new Response("Missing Item Variations eg. Price, Inventory Amount", {
    status: 500,
  });
---

<Layout title="R&L Packaging">
  <header class="sticky top-0 z-50">
    <Navbar />
  </header>
  <main class="min-h-screen">
    {
      imageUrl && typeof inventoryCount && category && item.object ? (
        "Loading..."
      ) : (
        <SingleShopItem
          client:load
          name={item.result.object.itemData.name}
          imageUrl={imageUrl ?? ""}
          inventoryCount={inventoryCount ?? "0"}
          price={(
            Number(
              item.result.object.itemData.variations[0].itemVariationData
                .priceMoney.amount
            ) / 100
          ).toLocaleString("en-US", {
            style: "currency",
            currency: "CAD",
          })}
          id={item.result.object.id}
          description={item.result.object.itemData.description}
          category={category ?? ""}
          attr1={{
            name: customAttributes[0].name ?? "",
            value: customAttributes[0].stringValue ?? "",
          }}
          attr2={{
            name: customAttributes?.[1]?.name ?? "",
            value: customAttributes?.[1]?.stringValue ?? "",
          }}
        />
      )
    }
    <div class="w-full h-20 grid place-items-center">
      <a class="btn btn-primary" href={`../../view?id=${Astro.params.item}`}
        >View Box? (beta)</a
      >
    </div>
  </main>

  <footer
    class="footer footer-center p-10 bg-base-200 text-base-content rounded"
  >
    <div class="grid grid-flow-col gap-4">
      <a class="link link-hover home-scroll">Home</a>
      <a class="link link-hover about-scroll">About</a>
      <a class="link link-hover history-scroll">History</a>
      <a class="link link-hover contact-scroll">Contact</a>
      <a class="link link-hover" href="./shop">Shop</a>
    </div>
    <div>
      <p>
        Copyright Â© {date.getFullYear()} - All right reserved by R&L Packaging
      </p>
      <p class="text-xs">
        Website designed by <a href="https://jedborseth.com">Jed Borseth</a>
      </p>
    </div>
  </footer>
  <script defer>
    const input = document.getElementById("quantity");
    const link = document.getElementById("buyLink");
    if (link && input)
      input.addEventListener("change", () => {
        link.href = link.href.split("&")[0];
        link.href =
          link.href + `&quantity=${input.value === "" ? 0 : input.value}`;
      });
  </script>
  <script
    type="text/javascript"
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCBINBUPEQ-HAJN0JyrUl6lzk7BA2sPMyM&libraries=places"
  ></script>
</Layout>
